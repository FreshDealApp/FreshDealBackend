Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport sqlalchemy\r\nfrom flask import Flask, redirect\r\nfrom flask_jwt_extended import JWTManager\r\nfrom flask_cors import CORS\r\nfrom dotenv import load_dotenv\r\nfrom src.models import db\r\nfrom src.routes import init_app\r\nfrom flasgger import Swagger\r\n\r\nload_dotenv()\r\n\r\ndef create_app():\r\n    app = Flask(__name__)\r\n\r\n    required_env_vars = {\r\n        \"DB_SERVER\": os.getenv(\"DB_SERVER\"),  # test\r\n        \"DB_NAME\": os.getenv(\"DB_NAME\"),\r\n        \"DB_USERNAME\": os.getenv(\"DB_USERNAME\"),\r\n        \"DB_PASSWORD\": os.getenv(\"DB_PASSWORD\"),\r\n        \"DB_DRIVER\": os.getenv(\"DB_DRIVER\"),\r\n        \"JWT_SECRET_KEY\": os.getenv(\"JWT_SECRET_KEY\"),\r\n    }\r\n\r\n    missing_vars = [var for var, value in required_env_vars.items() if not value]\r\n    if missing_vars:\r\n        raise SystemExit(f\"Error: Missing environment variables: {', '.join(missing_vars)}\")\r\n\r\n    app.config['SQLALCHEMY_DATABASE_URI'] = (\r\n        f\"mssql+pyodbc://{required_env_vars['DB_USERNAME']}:\" \r\n        f\"{required_env_vars['DB_PASSWORD']}@\"\r\n        f\"{required_env_vars['DB_SERVER']}/\"\r\n        f\"{required_env_vars['DB_NAME']}?driver={required_env_vars['DB_DRIVER']}\"\r\n    )\r\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:1234@127.0.0.1:3306/fresh_deal_local'\r\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\n    app.config['UPLOAD_FOLDER'] = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'uploads')\r\n\r\n    app.config['JWT_SECRET_KEY'] = required_env_vars['JWT_SECRET_KEY']\r\n    JWTManager(app)\r\n\r\n    db.init_app(app)\r\n\r\n    with app.app_context():\r\n        db.create_all()\r\n        try:\r\n            from src.services.achievement_service import AchievementService\r\n            AchievementService.initialize_achievements()\r\n            print(\"Achievements initialized successfully\")\r\n        except Exception as e:\r\n            print(f\"Error initializing achievements: {e}\")\r\n\r\n    try:\r\n        engine = sqlalchemy.create_engine(app.config['SQLALCHEMY_DATABASE_URI'])\r\n        connection = engine.connect()\r\n        connection.close()\r\n        print(\"Database connection successful.\")\r\n    except Exception as e:\r\n        print(f\"Error connecting to the database: {e}\")\r\n\r\n    init_app(app)\r\n\r\n    CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\r\n\r\n    # Flasgger setup with OpenAPI 3.0 and global security definitions\r\n    swagger_config = {\r\n        \"openapi\": \"3.0.0\",  # Using OpenAPI 3.0\r\n        \"info\": {\r\n            \"title\": \"Freshdeal API\",\r\n            \"description\": \"API for Freshdeal application\"\r\n                           ,\r\n            \"version\": \"1.0.0\",\r\n            \"contact\": {\r\n                \"name\": \"Freshdeal\",\r\n                \"url\": \"https://github.com/FreshDealApp\",\r\n                \"email\": \"\",\r\n\r\n            }\r\n        },\r\n        \"servers\": [\r\n            {\"url\": \"https://freshdealbackend.azurewebsites.net/\",\r\n             \"description\": \"Production server\"},\r\n            {\"url\": \"http://localhost:8000\", \"description\": \"Local development server\"},\r\n\r\n\r\n        ],\r\n        # Global security scheme using JWT bearer token\r\n        \"components\": {\r\n            \"securitySchemes\": {\r\n                \"BearerAuth\": {\r\n                    \"type\": \"http\",\r\n                    \"scheme\": \"bearer\",\r\n                    \"bearerFormat\": \"JWT\"\r\n                }\r\n            }\r\n        },\r\n        # Apply the security scheme globally to all endpoints\r\n        \"security\": [\r\n            {\r\n                \"BearerAuth\": []\r\n            }\r\n        ],\r\n        \"specs\": [\r\n            {\r\n                \"endpoint\": 'apispec_1',\r\n                \"route\": '/apispec_1.json',\r\n                \"rule_filter\": lambda rule: True,  # Include all API routes\r\n                \"model_filter\": lambda tag: True,  # Include all tags\r\n            }\r\n        ],\r\n        \"static_url_path\": \"/flasgger_static\",\r\n        \"swagger_ui\": True,\r\n        \"specs_route\": \"/swagger/\",\r\n        \"headers\": [],\r\n    }\r\n\r\n    Swagger(app, config=swagger_config)\r\n\r\n    @app.route('/')\r\n    def redirect_to_swagger():\r\n        return redirect('/swagger')\r\n\r\n    return app\r\n\r\napp = create_app()\r\n\r\nif __name__ == '__main__':\r\n    app.run(host=\"0.0.0.0\", port=5000, debug=False)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 1d78a4f0d76b11fe2a47dabf4b9d89d9d8f55cdc)
+++ b/app.py	(date 1745076933042)
@@ -125,4 +125,4 @@
 app = create_app()
 
 if __name__ == '__main__':
-    app.run(host="0.0.0.0", port=5000, debug=False)
+    app.run(host="0.0.0.0", port=8000, debug=False)
\ No newline at end of file
Index: src/services/recommendation_system_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime\r\nfrom sqlalchemy import func, and_\r\nfrom src.models import db, Purchase, Listing, Restaurant\r\nfrom sklearn.neighbors import NearestNeighbors\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n\r\nclass RecommendationSystemService:\r\n    def __init__(self):\r\n        self.purchase_matrix = None\r\n        self.listing_ids = None\r\n        self.model = None\r\n        self.is_initialized = False\r\n        self.k_neighbors = 5\r\n\r\n    def initialize_model(self):\r\n        if self.is_initialized:\r\n            return True\r\n\r\n        try:\r\n            # Get all completed purchases\r\n            purchases = Purchase.query.filter_by(status='COMPLETED').all()\r\n            if not purchases:\r\n                return False\r\n\r\n            # Create purchase data\r\n            purchase_data = []\r\n            for purchase in purchases:\r\n                purchase_data.append({\r\n                    'user_id': purchase.user_id,\r\n                    'listing_id': purchase.listing_id,\r\n                    'quantity': purchase.quantity\r\n                })\r\n\r\n            # Convert to DataFrame\r\n            df = pd.DataFrame(purchase_data)\r\n\r\n            # Create user-item matrix\r\n            user_listing_matrix = pd.pivot_table(\r\n                data=df,\r\n                index='listing_id',\r\n                columns='user_id',\r\n                values='quantity',\r\n                fill_value=0\r\n            )\r\n\r\n            self.purchase_matrix = user_listing_matrix.values\r\n            self.listing_ids = user_listing_matrix.index.tolist()\r\n\r\n            # Create KNN model\r\n            self.model = NearestNeighbors(\r\n                n_neighbors=min(self.k_neighbors, len(self.listing_ids)),\r\n                metric='cosine',\r\n                algorithm='brute'\r\n            )\r\n            self.model.fit(self.purchase_matrix)\r\n            self.is_initialized = True\r\n            return True\r\n\r\n        except Exception as e:\r\n            print(f\"Error initializing model: {e}\")\r\n            return False\r\n\r\n    @staticmethod\r\n    def get_recommendations_for_listing(listing_id):\r\n        service = RecommendationSystemService()\r\n        if not service.initialize_model():\r\n            return {\r\n                \"success\": False,\r\n                \"message\": \"Could not initialize recommendation model\"\r\n            }, 404\r\n\r\n        try:\r\n            # Get the target listing\r\n            listing = Listing.query.get(listing_id)\r\n            if not listing:\r\n                return {\r\n                    \"success\": False,\r\n                    \"message\": \"Listing not found\"\r\n                }, 404\r\n\r\n            # Find listing index\r\n            try:\r\n                listing_idx = service.listing_ids.index(listing_id)\r\n            except ValueError:\r\n                return {\r\n                    \"success\": False,\r\n                    \"message\": \"Listing not found in training data\"\r\n                }, 404\r\n\r\n            # Get recommendations using KNN\r\n            distances, indices = service.model.kneighbors(\r\n                [service.purchase_matrix[listing_idx]],\r\n                n_neighbors=min(service.k_neighbors, len(service.listing_ids))\r\n            )\r\n\r\n            # Convert distances to similarity scores\r\n            similarities = 1 - distances.flatten()\r\n\r\n            recommendations = []\r\n            for idx, similarity in zip(indices.flatten(), similarities):\r\n                if service.listing_ids[idx] != listing_id:  # Skip the input listing\r\n                    rec_listing = Listing.query.get(service.listing_ids[idx])\r\n                    if rec_listing:\r\n                        restaurant = Restaurant.query.get(rec_listing.restaurant_id)\r\n                        recommendations.append({\r\n                            \"listing_id\": rec_listing.id,\r\n                            \"title\": rec_listing.title,\r\n                            \"restaurant_name\": restaurant.restaurantName if restaurant else \"Unknown\",\r\n                            \"similarity_score\": float(similarity),\r\n                            \"pick_up_price\": rec_listing.pick_up_price,\r\n                            \"delivery_price\": rec_listing.delivery_price\r\n                        })\r\n\r\n            return {\r\n                \"success\": True,\r\n                \"data\": {\r\n                    \"listing\": {\r\n                        \"id\": listing.id,\r\n                        \"title\": listing.title\r\n                    },\r\n                    \"recommendations\": recommendations\r\n                }\r\n            }, 200\r\n\r\n        except Exception as e:\r\n            print(f\"Error getting recommendations: {e}\")\r\n            return {\r\n                \"success\": False,\r\n                \"message\": \"Error getting recommendations\"\r\n            }, 500\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/services/recommendation_system_service.py b/src/services/recommendation_system_service.py
--- a/src/services/recommendation_system_service.py	(revision 1d78a4f0d76b11fe2a47dabf4b9d89d9d8f55cdc)
+++ b/src/services/recommendation_system_service.py	(date 1745076552621)
@@ -129,4 +129,4 @@
             return {
                 "success": False,
                 "message": "Error getting recommendations"
-            }, 500
+            }, 500
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12 (FreshDealBackendML)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 1d78a4f0d76b11fe2a47dabf4b9d89d9d8f55cdc)
+++ b/.idea/misc.xml	(date 1745076042073)
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12 (FreshDealBackendML)" />
+  </component>
   <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (FreshDealBackendML)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"a4a2bf72-6c91-44a1-8272-a58dd62605ed\" name=\"Changes\" comment=\"recommendation system\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"FRESHDEAL-108\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;AtakanCamlica&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/FreshDealApp/FreshDealBackend&quot;,\r\n    &quot;accountId&quot;: &quot;efd5c0ba-b84d-421b-aaac-53b096a660df&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2vsRyfid3yvH7tbpR2sBHW9Ia4s\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Flask server.Flask (app.py).executor&quot;: &quot;Run&quot;,\r\n    &quot;Python tests.Python tests in recommendation_system.py.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.FreshDealBackendML.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Atakan\\PycharmProjects\\FreshDealBackendML\\src\\AI_services\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.FreshDealBackendML\">\r\n    <configuration name=\"FreshDealBackendML\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"FreshDealBackendML\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/app.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Flask (app.py)\" type=\"Python.FlaskServer\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"FreshDealBackendML\" />\r\n      <option name=\"target\" value=\"$PROJECT_DIR$/app.py\" />\r\n      <option name=\"targetType\" value=\"PATH\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests in recommendation_system.py\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"FreshDealBackendML\" />\r\n      <option name=\"ENV_FILES\" value=\"$PROJECT_DIR$/.env\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src/AI_services\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/src/AI_services/recommendation_system.py&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Flask server.Flask (app.py)\" />\r\n      <item itemvalue=\"Python.FreshDealBackendML\" />\r\n      <item itemvalue=\"Python tests.Python tests in recommendation_system.py\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Flask server.Flask (app.py)\" />\r\n        <item itemvalue=\"Python tests.Python tests in recommendation_system.py\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-PY-241.18034.82\" />\r\n        <option value=\"bundled-python-sdk-975db3bf15a3-2767605e8bc2-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.18034.82\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"a4a2bf72-6c91-44a1-8272-a58dd62605ed\" name=\"Changes\" comment=\"\" />\r\n      <created>1744932050915</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1744932050915</updated>\r\n      <workItem from=\"1744932052014\" duration=\"4120000\" />\r\n      <workItem from=\"1744945187779\" duration=\"883000\" />\r\n      <workItem from=\"1744946098058\" duration=\"21000\" />\r\n      <workItem from=\"1744946144489\" duration=\"20000\" />\r\n      <workItem from=\"1744946208837\" duration=\"2150000\" />\r\n      <workItem from=\"1745009033776\" duration=\"13000\" />\r\n      <workItem from=\"1745009344548\" duration=\"328000\" />\r\n      <workItem from=\"1745010571855\" duration=\"3114000\" />\r\n      <workItem from=\"1745075621560\" duration=\"107000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"recommendation system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744947947733</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744947947733</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"recommendation system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744947980574</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744947980574</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"recommendation system\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"recommendation system\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/FreshDealBackendML$FreshDealBackendML.coverage\" NAME=\"FreshDealBackendML Coverage Results\" MODIFIED=\"1744946103077\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/FreshDealBackendML$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1744948348987\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src/AI_services\" />\r\n    <SUITE FILE_PATH=\"coverage/FreshDealBackendML$Flask__app_py_.coverage\" NAME=\"Flask (app.py) Coverage Results\" MODIFIED=\"1745013048804\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1d78a4f0d76b11fe2a47dabf4b9d89d9d8f55cdc)
+++ b/.idea/workspace.xml	(date 1745093407693)
@@ -4,7 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="a4a2bf72-6c91-44a1-8272-a58dd62605ed" name="Changes" comment="recommendation system" />
+    <list default="true" id="a4a2bf72-6c91-44a1-8272-a58dd62605ed" name="Changes" comment="recommendation system">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/services/recommendation_system_service.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/services/recommendation_system_service.py" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -56,27 +61,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Flask server.Flask (app.py).executor&quot;: &quot;Run&quot;,
-    &quot;Python tests.Python tests in recommendation_system.py.executor&quot;: &quot;Run&quot;,
-    &quot;Python.FreshDealBackendML.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Flask server.Flask (app.py).executor": "Run",
+    "Python tests.Python tests in recommendation_system.py.executor": "Run",
+    "Python.FreshDealBackendML.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "FRESHDEAL-108-TEST",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "preferences.lookFeel",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\Atakan\PycharmProjects\FreshDealBackendML\src\AI_services" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.FreshDealBackendML">
+  <component name="RunManager" selected="Flask server.Flask (app.py)">
     <configuration name="FreshDealBackendML" type="PythonConfigurationType" factoryName="Python">
       <module name="FreshDealBackendML" />
       <option name="ENV_FILES" value="" />
@@ -139,6 +145,8 @@
     </list>
     <recent_temporary>
       <list>
+        <item itemvalue="Flask server.Flask (app.py)" />
+        <item itemvalue="Python tests.Python tests in recommendation_system.py" />
         <item itemvalue="Flask server.Flask (app.py)" />
         <item itemvalue="Python tests.Python tests in recommendation_system.py" />
       </list>
@@ -199,6 +207,6 @@
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/FreshDealBackendML$FreshDealBackendML.coverage" NAME="FreshDealBackendML Coverage Results" MODIFIED="1744946103077" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
     <SUITE FILE_PATH="coverage/FreshDealBackendML$.coverage" NAME=" Coverage Results" MODIFIED="1744948348987" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/AI_services" />
-    <SUITE FILE_PATH="coverage/FreshDealBackendML$Flask__app_py_.coverage" NAME="Flask (app.py) Coverage Results" MODIFIED="1745013048804" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
+    <SUITE FILE_PATH="coverage/FreshDealBackendML$Flask__app_py_.coverage" NAME="Flask (app.py) Coverage Results" MODIFIED="1745076933058" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
   </component>
 </project>
\ No newline at end of file
