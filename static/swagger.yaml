openapi: 3.0.0
info:
  title: Freshdeal API
  description: API for managing users, authentication, customer addresses, and restaurants.
  version: 1.0.0

servers:
  - url: http://localhost:8181/v1
  - url: https://freshdealapi-fkfaajfaffh4c0ex.uksouth-01.azurewebsites.net/v1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # --------------------------
    #        User Schema
    # --------------------------
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
          example: 1234
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "johndoe@example.com"
        phone_number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: User's phone number in international format
          example: "+14155552671"
        role:
          type: string
          description: User's role in the system
          enum: [user, admin, manager, customer, owner]
          example: "user"

    # --------------------------
    #       Address Schema
    # --------------------------
    Address:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the address
          example: 5678
        title:
          type: string
          description: Custom title for the address
          example: "Home"
        longitude:
          type: number
          format: float
          description: Geographical longitude
          example: 28.97953
        latitude:
          type: number
          format: float
          description: Geographical latitude
          example: 41.015137
        street:
          type: string
          description: Street name
          example: "Main Street"
        neighborhood:
          type: string
          description: Neighborhood name
          example: "Downtown"
        district:
          type: string
          description: District name
          example: "Financial District"
        province:
          type: string
          description: Province/State name
          example: "California"
        country:
          type: string
          description: Country name
          example: "United States"
        postalCode:
          type: integer
          description: Postal/ZIP code
          example: 94105
        apartmentNo:
          type: integer
          description: Apartment number
          example: 42
        doorNo:
          type: string
          description: Door number
          example: "4B"

    # --------------------------
    #    User Response Schema
    # --------------------------
    UserResponse:
      type: object
      properties:
        user_data:
          $ref: '#/components/schemas/User'
        user_address_list:
          type: array
          items:
            $ref: '#/components/schemas/Address'
      example:
        user_data:
          id: 1234
          name: "John Doe"
          email: "johndoe@example.com"
          phone_number: "+14155552671"
          role: "user"
        user_address_list:
          - id: 5678
            title: "Home"
            longitude: 28.97953
            latitude: 41.015137
            street: "Main Street"
            neighborhood: "Downtown"
            district: "Financial District"
            province: "California"
            country: "United States"
            postalCode: 94105
            apartmentNo: 42
            doorNo: "4B"

    # --------------------------
    #    Listing Schema
    # --------------------------
    Listing:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the listing
          example: 1
        restaurant_id:
          type: integer
          description: ID of the associated restaurant
          example: 5
        title:
          type: string
          description: Title of the listing
          example: "Delicious Burger"
        description:
          type: string
          description: Description of the listing
          example: "A tasty burger with fresh ingredients."
        image_url:
          type: string
          format: uri
          description: URL to the listing's image
          example: "http://localhost:8181/v1/listings/uploads/unique_burger.jpg"
        price:
          type: number
          format: float
          description: Price of the listing
          example: 9.99

    # --------------------------
    #   Listing Create Schema
    # --------------------------
    ListingCreate:
      type: object
      required:
        - title
        - price
        - image
      properties:
        title:
          type: string
          description: Title of the listing
          example: "Delicious Burger"
        description:
          type: string
          description: Description of the listing
          example: "A tasty burger with fresh ingredients."
        price:
          type: number
          format: float
          description: Price of the listing
          example: 9.99
        image:
          type: string
          format: binary
          description: Image file for the listing

    # --------------------------
    #   CartItem Schema
    # --------------------------
    CartItem:
      type: object
      properties:
        id:
          type: integer
          description: Unique cart item identifier
          example: 10
        listing_id:
          type: integer
          description: The ID of the associated listing
          example: 1
        title:
          type: string
          description: Title of the listing
          example: "Delicious Burger"
        price:
          type: number
          format: float
          description: Price of a single item
          example: 9.99
        count:
          type: integer
          description: Quantity of this item
          example: 2
        added_at:
          type: string
          format: date-time
          description: Timestamp when item was added to the cart
          example: "2023-08-17T12:34:56"

    # --------------------------
    #    Shared Login Base
    # --------------------------
    LoginBaseSchema:
      type: object
      required:
        - login_type
        - password_login
      properties:
        login_type:
          type: string
          enum: [email, phone_number]
          description: Specifies the authentication method
        password_login:
          type: boolean
          description: True if password-based; False if passwordless

    # --------------------------
    #    Password Login
    # --------------------------
    PasswordLogin:
      allOf:
        - $ref: '#/components/schemas/LoginBaseSchema'
        - type: object
          required:
            - password
          properties:
            password_login:
              type: boolean
              enum: [true]
              description: Must be true for password-based login
            email:
              type: string
              format: email
              example: "user@example.com"
              description: Required when login_type is email
              pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            phone_number:
              type: string
              example: "+14155552671"
              description: Required when login_type is phone_number
              pattern: '^\+[1-9]\d{1,14}$'
            password:
              type: string
              format: password
              minLength: 8
              maxLength: 128
              description: |
                Password must have at least:
                - 8 characters
                - 1 uppercase letter
                - 1 lowercase letter
                - 1 digit
              example: "SecurePass123"

    # --------------------------
    #   Passwordless Login
    # --------------------------
    PasswordlessLogin:
      allOf:
        - $ref: '#/components/schemas/LoginBaseSchema'
        - type: object
          required:
            - step
          properties:
            password_login:
              type: boolean
              enum: [false]
              description: Must be false for passwordless login
            email:
              type: string
              format: email
              example: "user@example.com"
              description: Required when login_type is email
              pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            phone_number:
              type: string
              example: "+14155552671"
              description: Required when login_type is phone_number
              pattern: '^\+[1-9]\d{1,14}$'
            step:
              type: string
              enum: [send_code]
              description: Must be 'send_code' for initial passwordless request

    # --------------------------
    #    Login Request Schema
    # --------------------------
    LoginRequest:
      oneOf:
        - $ref: '#/components/schemas/PasswordLogin'
        - $ref: '#/components/schemas/PasswordlessLogin'

    # --------------------------
    #    Login Response
    # --------------------------
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        token:
          type: string
          description: JWT token (only for successful password login)
        details:
          type: object
          properties:
            error_code:
              type: string
              enum:
                - MISSING_LOGIN_TYPE
                - INVALID_CREDENTIALS
                - USER_NOT_FOUND
                - INVALID_EMAIL_FORMAT
                - INVALID_PHONE_FORMAT
                - RATE_LIMIT_EXCEEDED
            description:
              type: string

    # --------------------------
    #       Login Error
    # --------------------------
    LoginError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        details:
          type: object
          properties:
            error_code:
              type: string
            description:
              type: string

    # --------------------------
    #      Register Request
    # --------------------------
    RegisterRequest:
      type: object
      required:
        - name_surname
        - password
        - role
      properties:
        name_surname:
          type: string
          description: Full name of the user
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address (optional if phone_number is provided)
          example: "johndoe@example.com"
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        phone_number:
          type: string
          description: User's phone number in international format (optional if email is provided)
          example: "+14155552671"
          pattern: '^\+[1-9]\d{1,14}$'
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 128
          description: |
            Password must have at least:
            - 8 characters
            - 1 uppercase letter
            - 1 lowercase letter
            - 1 digit
          example: "SecurePass123"
        role:
          type: string
          enum: [customer, owner]
          example: "customer"

    # --------------------------
    #      Register Response
    # --------------------------
    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User registered successfully!"

    # --------------------------
    #      Register Error Response
    # --------------------------
    RegisterErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message detailing what went wrong."

    # --------------------------
    #      Restaurant Schemas
    # --------------------------
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the restaurant
          example: 1
        owner_id:
          type: integer
          description: The owner (user) ID who created this restaurant
          example: 123
        restaurantName:
          type: string
          description: Name of the restaurant
          example: "Pizza Palace"
        restaurantDescription:
          type: string
          description: Short description about the restaurant
          example: "Authentic Italian pizzas."
        longitude:
          type: number
          format: float
          description: Geographical longitude of the restaurant
          example: 28.97953
        latitude:
          type: number
          format: float
          description: Geographical latitude of the restaurant
          example: 41.015137
        category:
          type: string
          description: Category or cuisine type
          example: "Italian"
        workingDays:
          type: array
          description: Days of operation (converted from a comma-separated list in the database)
          items:
            type: string
          example: ["Monday", "Tuesday", "Wednesday"]
        workingHoursStart:
          type: string
          description: Opening hour (in HH:MM format)
          example: "09:00"
        workingHoursEnd:
          type: string
          description: Closing hour (in HH:MM format)
          example: "22:00"
        listings:
          type: integer
          description: Count representing the listings
          example: 42
        rating:
          type: number
          format: float
          description: Current average rating for the restaurant
          example: 4.5
        ratingCount:
          type: integer
          description: Number of ratings that contribute to the average rating
          example: 200
        image_url:
          type: string
          format: uri
          description: URL to the restaurant's image
          example: "http://localhost:8181/v1/uploads/unique_restaurant.jpg"

    RestaurantCreate:
      type: object
      required:
        - restaurantName
        - longitude
        - latitude
        - category
        - listings
      properties:
        restaurantName:
          type: string
          description: Name of the restaurant
          example: "Pizza Palace"
        restaurantDescription:
          type: string
          description: Short description about the restaurant
          example: "Authentic Italian pizzas."
        longitude:
          type: number
          format: float
          description: Geographical longitude of the restaurant
          example: 28.97953
        latitude:
          type: number
          format: float
          description: Geographical latitude of the restaurant
          example: 41.015137
        category:
          type: string
          description: Category or cuisine type
          example: "Italian"
        workingDays:
          type: array
          items:
            type: string
          description: Days of operation
          example: ["Monday", "Tuesday", "Wednesday"]
        workingHoursStart:
          type: string
          description: Opening hour (in HH:MM format)
          example: "09:00"
        workingHoursEnd:
          type: string
          description: Closing hour (in HH:MM format)
          example: "22:00"
        listings:
          type: integer
          description: Count representing the listings
          example: 42
        image:
          type: string
          format: binary
          description: Image file for the restaurant (optional)

    # --------------------------
    #    Restaurant Create Response Schema
    # --------------------------
    RestaurantCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "New restaurant is successfully added!"
        image_url:
          type: string
          format: uri
          description: URL to the uploaded image
          example: "http://localhost:8181/v1/uploads/unique_restaurant.jpg"

paths:
  #####################################
  #           Authentication
  #####################################
  /login:
    post:
      summary: User Login
      description: |
        Authentication endpoint supporting both password-based and passwordless login.

        Scenarios:
        A. Password Login (`password_login: true`)
           - A.1 Email + Password
           - A.2 Phone Number + Password

        B. Passwordless Login (`password_login: false`)
           - B.1 Email (sends verification code)
           - B.2 Phone Number (sends verification code)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              PasswordLogin_Email:
                summary: Password Login with Email (A.1)
                value:
                  login_type: "email"
                  password_login: true
                  email: "user@example.com"
                  password: "SecurePass123"
              PasswordLogin_Phone:
                summary: Password Login with Phone Number (A.2)
                value:
                  login_type: "phone_number"
                  password_login: true
                  phone_number: "+14155552671"
                  password: "SecurePass123"
              PasswordlessLogin_Email:
                summary: Passwordless Login with Email (B.1)
                value:
                  login_type: "email"
                  password_login: false
                  email: "user@example.com"
                  step: "send_code"
              PasswordlessLogin_Phone:
                summary: Passwordless Login with Phone Number (B.2)
                value:
                  login_type: "phone_number"
                  password_login: false
                  phone_number: "+14155552671"
                  step: "send_code"
              existingInfo:
                summary: existing USER
                value:
                  login_type: "phone_number"
                  password_login: true
                  phone_number: "0000"
                  password: "0"
              existingOwner:
                summary: existing Owner
                value:
                  login_type: "email"
                  password_login: true
                  email: "owner@owner.com"
                  password: "owner"
      responses:
        "200":
          description: Successful login (for password login) or verification code sent (for passwordless login)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Bad request or validation error
        "401":
          description: Invalid credentials
        "404":
          description: User not found

  #####################################
  #            Registration
  #####################################
  /register:
    post:
      summary: User Registration
      description: Register a new user with either email or phone number.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              RegisterWithEmail:
                summary: Register with Email
                value:
                  name_surname: "John Doe"
                  email: "johndoe@example.com"
                  password: "SecurePass123"
                  role: "customer"
              RegisterWithPhone:
                summary: Register with Phone Number
                value:
                  name_surname: "Jane Smith"
                  phone_number: "+14155552671"
                  password: "AnotherPass456"
                  role: "customer"
              RegisterWithEmailAndPhone:
                summary: Register with Both Email and Phone Number
                value:
                  name_surname: "Alice Johnson"
                  email: "alice@example.com"
                  phone_number: "+14155552672"
                  password: "StrongPass789"
                  role: "customer"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        "400":
          description: Validation error or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterErrorResponse'
        "409":
          description: Conflict - Email or phone number already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterErrorResponse'
        "500":
          description: Server error

  #####################################
  #            Address Paths
  #####################################
  /add_customer_address:
    post:
      summary: Add a customer address
      description: Add a new address for the logged-in user.
      tags:
        - Address
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        "201":
          description: Address added
        "400":
          description: Validation error
        "500":
          description: Server error

  /get_customer_address:
    get:
      summary: Get customer addresses
      description: Retrieve all addresses associated with the logged-in user.
      tags:
        - Address
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        "404":
          description: No addresses found
        "500":
          description: Server error

  /delete_customer_address/{id}:
    delete:
      summary: Delete a customer address
      description: Delete an address by ID for the logged-in user.
      tags:
        - Address
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Address deleted
        "404":
          description: Address not found
        "500":
          description: Server error

  #####################################
  #              User
  #####################################
  /user/data:
    get:
      summary: Get user data
      description: Fetch user information and associated addresses based on the JWT token.
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: User not found
        "500":
          description: Server error

  /update_password:
    post:
      summary: Update user password
      description: |
        Allows the user to change their password if the old password is verified.
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  format: password
                  description: Old password
                  example: "CurrentPass123"
                new_password:
                  type: string
                  format: password
                  description: New password
                  example: "NewSecurePass456"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully"
        "400":
          description: Old password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Old password is incorrect"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

  /update_username:
    post:
      summary: Update user name
      description: |
        Allows the user to change their username (full name).
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New username (full name)
                  example: "Johnny Appleseed"
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username updated successfully"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

  /update_email:
    post:
      summary: Update user email
      description: |
        Allows the user to change their email if the old email matches the database record.
        A mock verification email is then sent to the new address.
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_email:
                  type: string
                  format: email
                  description: The current (old) email to verify
                  example: "old@example.com"
                new_email:
                  type: string
                  format: email
                  description: The new email address to update to
                  example: "new@example.com"
      responses:
        "200":
          description: Email updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email updated successfully"
        "400":
          description: Old email is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Old email is incorrect"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

  /favorites:
    post:
      summary: Add a restaurant to favorites
      description: |
        Adds a restaurant to the authenticated user's favorites.
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurant_id:
                  type: integer
                  description: ID of the restaurant to add to favorites
                  example: 42
      responses:
        "201":
          description: Restaurant added to favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurant added to favorites"
        "400":
          description: Restaurant already in favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurant is already in your favorites"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

    delete:
      summary: Remove a restaurant from favorites
      description: |
        Removes a restaurant from the authenticated user's favorites.
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurant_id:
                  type: integer
                  description: ID of the restaurant to remove from favorites
                  example: 42
      responses:
        "200":
          description: Restaurant removed from favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurant removed from favorites"
        "404":
          description: Favorite not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Favorite not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

    get:
      summary: Get user favorites
      description: |
        Retrieves a list of the user's favorite restaurants.
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully retrieved user favorites (may be an empty list)
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorites:
                    type: array
                    items:
                      type: object
                      properties:
                        restaurant_id:
                          type: integer
                          example: 42
                        restaurant_name:
                          type: string
                          example: "Pizza Palace"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

  #####################################
  #         Restaurant Manager
  #####################################
  /add_restaurant:
    post:
      summary: Add a new restaurant
      description: |
        Create a new restaurant entry for the logged-in user.
        **Only** users with `owner` role can add a restaurant.
      tags:
        - Restaurant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestaurantCreate'
            encoding:
              image:
                contentType: ["image/png", "image/jpg", "image/jpeg", "video/webm"]
      responses:
        "201":
          description: New restaurant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantCreateResponse'
        "400":
          description: Validation error (e.g., missing fields, invalid role)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "403":
          description: Unauthorized action (e.g., user not owner)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "404":
          description: Owner not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

  /get_restaurants_proximity:
    post:
      summary: Get restaurants within a specified proximity
      description: |
        Retrieve restaurants within a given radius of a specified latitude and longitude.
        Optional authentication via JWT can be applied if needed.
      tags:
        - Restaurant
      security:
        - bearerAuth: []  # Optional: Remove this if authentication is not required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  type: number
                  format: float
                  description: Latitude of the user's location
                  example: 41.015137
                longitude:
                  type: number
                  format: float
                  description: Longitude of the user's location
                  example: 28.97953
                radius:
                  type: number
                  format: float
                  description: "Radius in kilometers (default: 10)"
                  example: 5
              required:
                - latitude
                - longitude
            examples:
              example1:
                summary: Search within a 10 km radius
                value:
                  latitude: 41.015137
                  longitude: 28.97953
                  radius: 10
              example2:
                summary: Search within a 5 km radius
                value:
                  latitude: 40.748817
                  longitude: -73.985428
                  radius: 5
      responses:
        "200":
          description: Restaurants found within the specified radius
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurants:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Restaurant ID
                          example: 1
                        owner_id:
                          type: integer
                          description: Owner ID of the restaurant
                          example: 123
                        restaurantName:
                          type: string
                          description: Name of the restaurant
                          example: "Pizza Palace"
                        restaurantDescription:
                          type: string
                          description: Description of the restaurant
                          example: "Authentic Italian pizzas."
                        longitude:
                          type: number
                          format: float
                          description: Longitude of the restaurant
                          example: 28.97953
                        latitude:
                          type: number
                          format: float
                          description: Latitude of the restaurant
                          example: 41.015137
                        category:
                          type: string
                          description: Cuisine or category of the restaurant
                          example: "Italian"
                        workingDays:
                          type: array
                          items:
                            type: string
                          description: Days of operation
                          example: ["Monday", "Tuesday"]
                        workingHoursStart:
                          type: string
                          description: Opening hours
                          example: "09:00"
                        workingHoursEnd:
                          type: string
                          description: Closing hours
                          example: "22:00"
                        listings:
                          type: integer
                          description: Count representing the listings
                          example: 42
                        rating:
                          type: number
                          format: float
                          description: Average rating of the restaurant
                          example: 4.5
                        ratingCount:
                          type: integer
                          description: Total number of ratings
                          example: 200
                        image_url:
                          type: string
                          format: uri
                          description: URL to the restaurant's image
                          example: "http://localhost:8181/v1/uploads/unique_restaurant.jpg"
                        distance_km:
                          type: number
                          format: float
                          description: Distance from the user location in kilometers
                          example: 3.57
        "400":
          description: Validation error or missing latitude/longitude
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Latitude and longitude are required"
        "404":
          description: No restaurants found within the specified radius
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No restaurants found within the specified radius"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "An error occurred"
                  error:
                    type: string
                    example: "Error message details"

  /get_restaurant/{restaurant_id}:
    get:
      summary: Get a single restaurant
      description: Retrieve a specific restaurant by its ID. Anyone can access this endpoint (no auth required).
      tags:
        - Restaurant
      parameters:
        - in: path
          name: restaurant_id
          required: true
          schema:
            type: integer
          description: ID of the restaurant to retrieve
      responses:
        "200":
          description: Restaurant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

  /get_restaurants:
    get:
      summary: Get all restaurants for the logged-in owner
      description: |
        Retrieves all restaurants belonging to the logged-in owner.
        **Only** users with `owner` role can access their owned restaurants.
      tags:
        - Restaurant
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Restaurants retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        "400":
          description: User is not an owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "404":
          description: No restaurant found for the owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

  /delete_restaurant/{restaurant_id}:
    delete:
      summary: Delete a restaurant
      description: |
        Remove a restaurant by its ID. Only the owner who created the restaurant can delete it.
      tags:
        - Restaurant
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: restaurant_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Restaurant deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "404":
          description: Restaurant not found or user not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

  /listings/add_listing/{restaurant_id}:
    post:
      summary: Add a new listing to a restaurant
      description: |
        Create a new listing for a specific restaurant. Only the owner of the restaurant can add listings.
      tags:
        - Listings
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: restaurant_id
          required: true
          schema:
            type: integer
          description: ID of the restaurant to which the listing will be added
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingCreate'
            encoding:
              image:
                contentType: ["image/png", "image/jpg", "image/jpeg", "video/webm"]
      responses:
        "201":
          description: Listing added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Listing added successfully!"
                  image_url:
                    type: string
                    format: uri
                    description: URL to the uploaded image
                    example: "http://localhost:8181/v1/listings/uploads/unique_burger.jpg"
        "400":
          description: Validation error or missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid or missing image file"
        "403":
          description: Unauthorized action (e.g., user not owner)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                  error:
                    type: string

  /listings/get_listings:
    get:
      summary: Get listings
      description: |
        Retrieve all listings or filter them by `restaurant_id`. Supports pagination.
      tags:
        - Listings
      parameters:
        - in: query
          name: restaurant_id
          schema:
            type: integer
          description: ID of the restaurant to filter listings
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
          description: Number of listings per page
      responses:
        "200":
          description: Successfully retrieved listings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 50
                      pages:
                        type: integer
                        example: 5
                      current_page:
                        type: integer
                        example: 1
                      per_page:
                        type: integer
                        example: 10
                      has_next:
                        type: boolean
                        example: true
                      has_prev:
                        type: boolean
                        example: false
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "An error occurred while fetching listings"
                  error:
                    type: string

  #####################################
  #            File Uploads
  #####################################
  /uploads/{filename}:
    get:
      summary: Get uploaded file
      description: Retrieve an uploaded image or video file by filename.
      tags:
        - Listings
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: Name of the file to retrieve
      responses:
        "200":
          description: File retrieved successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            video/webm:
              schema:
                type: string
                format: binary
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                  error:
                    type: string

  #####################################
  #              Cart
  #####################################
  /cart:
    get:
      summary: Get cart items
      description: Fetch the current user's cart items.
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current cart items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
        "500":
          description: An error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                  error:
                    type: string

  /cart/add:
    post:
      summary: Add an item to the cart
      description: Add or increment a listing in the user's cart.
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listing_id:
                  type: integer
                  description: ID of the listing to add
                  example: 1
                count:
                  type: integer
                  description: Number of items to add
                  example: 2
      responses:
        "201":
          description: Item added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Item added to cart"
        "404":
          description: Listing not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Listing not found"
        "500":
          description: An error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                  error:
                    type: string

  /cart/remove:
    delete:
      summary: Remove an item from the cart
      description: Remove a listing from the user's cart completely.
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listing_id:
                  type: integer
                  description: ID of the listing to remove
                  example: 1
      responses:
        "200":
          description: Item removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Item removed from cart"
        "404":
          description: Item not found in cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Item not found in cart"
        "500":
          description: An error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                  error:
                    type: string

  /cart/update:
    put:
      summary: Update the quantity of an item in the cart
      description: Modify the count of a specific listing in the user's cart.
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listing_id:
                  type: integer
                  description: ID of the listing to update
                  example: 1
                count:
                  type: integer
                  description: New quantity for this listing
                  example: 3
      responses:
        "200":
          description: Cart item updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart item updated"
        "404":
          description: Item not found in cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Item not found in cart"
        "500":
          description: An error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  error:
                    type: string

security:
  - bearerAuth: []
